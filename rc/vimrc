set autochdir                                    " Set cwd to the current file's dir
set nocompatible                                 " I don't need Vim to be Vi compatible
syntax on                                        " syntax highlighting
filetype plugin indent on
let mapleader=","                                " Maps <leader> to ,


" ----- Hybrid Colorscheme ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-hybrid


" ----- Indent Line ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/indentLine
let g:indentLine_color_term = 241
let g:indentLine_char = '⋅'
" ----- Tagbar ---------------------------
if executable("ctags")
    set runtimepath^=$SHDWDIR/rc/vim/bundle/Tagbar
endif

" ----- Airline ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-airline
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-airline-themes
let g:airline_left_sep = '░'
let g:airline_right_sep = '░'
let g:airline_theme='lucius'

" ----- Fugitive ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-fugitive

" ----- Git Gutter ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-gitgutter
nnoremap <leader>G :GitGutterLineHighlightsToggle<CR>
nnoremap <Left> :GitGutterPrevHunk<CR>
nnoremap <Right> :GitGutterNextHunk<CR>
nnoremap + :GitGutterStageHunk<CR>
nnoremap - :GitGutterRevertHunk<CR>

" ----- Ctrl-P ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/ctrlp.vim
let g:ctrlp_cmd = 'CtrlPMRU'

" ----- PEP8 Indent ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-python-pep8-indent

" ----- AutoPEP8 ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-autopep8

" ----- Jedi ---------------------------
" set runtimepath^=$SHDWDIR/rc/vim/bundle/jedi-vim
let g:jedi#use_tabs_not_buffers = 1
let g:jedi#show_call_signatures = "0"
let g:jedi#usages_command = "<leader>u"

" ----- Braceless (text objects for python) ----
set runtimepath^=$SHDWDIR/rc/vim/bundle/braceless.vim
autocmd FileType python BracelessEnable +indent

" ----- NerdTree ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/nerdtree
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-nerdtree-tabs
let NERDTreeIgnore=['\.o$', '\~$', '\.pyc$']
nnoremap <leader>n :NERDTreeTabsToggle<CR>

" ----- YankRing ---------------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/YankRing.vim

" ----- Syntastic ----------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_python_checkers = ['flake8'] " Remember to `sudo pip install flake8`
let g:syntastic_quiet_messages = { 'regex': ['E402'] }
let g:syntastic_python_flake8_args = "--max-line-length=160"
let g:syntastic_warning_symbol="⚠"
let g:syntastic_error_symbol="✗"
let g:syntastic_cpp_compiler = '' "'clang++'
let g:syntastic_cpp_compiler_options = ' -std=c++11'
let g:syntastic_javascript_checkers = ['eslint']

" ----- Javascript and React ----------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-javascript
" set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-jsx
" let g:jsx_ext_required = 0 " Allow JSX in normal JS files

" ----- Show marks in the gutter ------------------
set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-signature

set runtimepath^=$SHDWDIR/rc/vim/bundle/vim-abolish

" Basic Vim settings
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$' " Highlight VCS conflict markers
set background=dark
set mouse=a                                      " Mouse lort in terminal Vim
set encoding=utf-8                               " Text encoding should support more than ASCII
set ruler                                        " Show line, col, line% in bottom right corner
set autoindent                                   " Auto indent new lines
set nosmartindent                                " Indent smartly after {'s, etc
set expandtab                                    " Spaces instead of tabs
set tabstop=4                                    " Cols per tab
set shiftwidth=4                                 " Cols per shift (>> and <<)
set showmatch                                    " Briefly show the matching bracket when you type it (won't scroll)
set guioptions-=T                                " No toolbar
set guioptions-=M                                " No menu bar
set guioptions-=l                                " No left scrollbar
set guioptions-=L
set guioptions-=R                                " No right scrollbar
set guioptions-=r
set showmode                                     " Tell me when I'm in insert mode
set ttyfast                                      " We're on a fast connection, it's ok to send lots of bytes
set autoread                                     " Detect when open files have changed and reopen them
set title                                        " Set the title bar
set formatoptions=qn1                            " See :help fo-table for options here
set number                                       " Line numbers
set diffopt+=iwhite                              " Ignore whitespace in diffs
set nobackup                                     " Backup off, since most stuff is in SVN, git et.c anyway...
set nowritebackup                                "  
set noswapfile                                   "  
set backspace=indent,eol,start                   " Allow backspace before insertion point
set switchbuf=usetab,newtab                      " Switch to an existing tab if a buffer is open, or create a new one if not
set hidden                                       " Don't unload buffer when it is abandoned
set hlsearch                                     " Highlight all search matches
set incsearch                                    " Indicate next search match as the pattern is being entered
set ignorecase                                   " Ignore case when searching
set smartcase                                    " Do not ignore case when the search pattern contains upper case
set magic                                        " Magic
set tags=./tags,tags;/                           " Look for tag files recursively up to the root directory.
set t_ut=                                        " Redraw background
set nospell                                      " I don't want spell checking
set conceallevel=0                               " Don't hide quotes
set autochdir                                    " Set cwd to the current file's dir

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Setup the wildmenu
set wildmenu
set wildmode=list:longest
set wildignore+=*.git,*.svn
set wildignore+=*.aux,*.out,*.toc
set wildignore+=*.jpg,*.jpeg,*.bmp,*.gif,*.png,*.pdf
set wildignore+=*.o
set wildignore+=*.DS_Store
set wildignore+=*.pyc

" ------------
" Mappings
" ------------

" Buffer stuff. Q=go to last buffer; <leader>x=close buffer
nmap Q :b#<CR>
nmap <leader>x :bd<CR>
nmap ( :bprev<CR>
nmap ) :bnext<CR>

" jump wrapped lines
nmap j gj
nmap k gk

" jk gets you into normal mode
inoremap jk <esc>

" Edit/source vimrc file in a split
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Clear search highlights
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Disable F1
inoremap <F1> <ESC>
nnoremap <F1> <ESC>
vnoremap <F1> <ESC>

" Toggle line wrap
nnoremap <leader>w :set wrap!<cr>

" ctags stuff
" Jump to a tag definition in a new tab with Ctrl+\
map <C-\> :tab split<cr>:exec("tag ".expand("<cword>"))<CR>

" Type :w!! to save a file as sudo
cmap w!! w !sudo tee > /dev/null %

" --------------------
" Misc plugin settings
" --------------------
set completeopt-=preview                                                        " ???
let g:showmarks_include="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"  " Only show marks set to these registers
let g:airline#extensions#tabline#enabled=1                                      " Enable airline by default on new sessions
let g:airline#extensions#syntastic#enabled=1                                    " Enable airline by default on new sessions
set laststatus=2                                                                " see above

nnoremap <leader>t :TagbarToggle<CR>
imap <leader>= :Tab /=<CR>
nmap <leader>= :Tab /=<CR>
vmap <leader>= :Tab /=<CR>
imap <leader>: :Tab /:<CR>
nmap <leader>: :Tab /:<CR>
vmap <leader>: :Tab /:<CR>

" -----------------
" Filetype settings
" -----------------

" Check for changes on disk when the cursor is moved, and then remains still
au CursorHold * checktime

" my notes files
au BufRead,BufNewFile *.note set filetype=notes

" arduino files
au BufRead, BufNewFile *.ino set filetype=arduino

" markdown
au BufRead,BufNewFile *.md set filetype=markdown

" makefiles
augroup filetype_make
  autocmd!
  " Don't expand tabs when editing makefiles
  autocmd! FileType make setlocal noexpandtab
augroup END

" vim scripts
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
  autocmd FileType vim set foldlevelstart=0
augroup END
 
" text files
augroup filetype_txt
  autocmd BufNewFile,BufRead *.txt setlocal ft=none
  autocmd BufNewFile,BufRead *.txt setlocal spell
  autocmd BufNewFile,BufRead *.txt setlocal foldmethod=marker
augroup END

" python files
augroup filetype_python
  autocmd FileType python setl nosmartindent
  set conceallevel=1 " For cool indent dots
augroup END

augroup filetype_cma
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal ft=cmake
  autocmd BufNewFile,BufRead CMakeLists.txt setlocal nospell
  set nospell
augroup END

augroup filetype_slice
  autocmd BufNewFile,BufRead *.ice setlocal ft=slice.doxygen
augroup END

augroup filetype_yaml
    autocmd BufNewFile,BufRead *.yaml setlocal conceallevel=0 " Don't hide quotes
augroup END

augroup filetype_json
    autocmd FileType json let g:indentLine_enabled=0
    autocmd FileType json setlocal concealcursor=inc " Don't hide quotes
    autocmd FileType json setlocal conceallevel=0 " Don't hide quotes
augroup END

" Not sure why this has to go here
colorscheme hybrid

" Specify syntax highlighting for doxygen comments
let g:load_doxygen_syntax=1
let g:doxygen_enhanced_color=1
hi doxygenbrief ctermfg=61 ctermbg=NONE cterm=NONE
hi doxygenbody cterm=None ctermfg=60 ctermbg=None
hi doxygencomment ctermfg=60 ctermbg=NONE cterm=NONE

hi doxygenspecial ctermfg=63 ctermbg=NONE cterm=NONE
hi doxygenparam ctermfg=63 ctermbg=NONE cterm=NONE
hi doxygensmallspecial ctermfg=63 ctermbg=NONE cterm=NONE
hi doxygenprev ctermfg=63 ctermbg=NONE cterm=NONE
hi doxygenspecialmultilinedesc ctermfg=69 ctermbg=NONE cterm=NONE
hi doxygenspecialonelinedesc ctermfg=69 ctermbg=NONE cterm=NONE
hi doxygenparamname cterm=italic ctermfg=75

" vim: set ft=vim:
